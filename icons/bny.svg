<?xml version="1.0" encoding="UTF-8"?>
<svg width="176px" height="22px" viewBox="0 0 176 22" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><script xmlns="">(function() {
		window.addEventListener('message', function(event) {
			if (
				event.data &amp;&amp;
				event.data.id &amp;&amp;
				typeof event.data.id.startsWith === 'function' &amp;&amp;
				event.data.id.startsWith('adobeExperienceCloudDebuggerContentMessagingIdentifier-')
			) {
				event.stopImmediatePropagation();
			}
		},
		{capture: true});
	})();</script><script xmlns="">
		(function() {
			const contentScriptEventTrigger = function(data) {
				window.postMessage({ id:'adobeExperienceCloudDebuggerContentMessagingIdentifier-1', data: data });
			}
			const DATA_LAYER_LOCAL_STORAGE_KEY =
  "com.adobe.experiencePlatformDebugger.dataLayer.key";
const dataLayerKey = window.localStorage.getItem(DATA_LAYER_LOCAL_STORAGE_KEY);

if (dataLayerKey) {
  // sindresorhus/on-change
  // MIT - License
  // https://github.com/sindresorhus/on-change
  const PATH_SEPARATOR = ".";
  const TARGET = Symbol("target");
  const UNSUBSCRIBE = Symbol("unsubscribe");

  const isPrimitive = value =&gt;
    value === null ||
    (typeof value !== "object" &amp;&amp; typeof value !== "function");

  const isBuiltinWithoutMutableMethods = value =&gt;
    value instanceof RegExp || value instanceof Number;

  const isBuiltinWithMutableMethods = value =&gt; value instanceof Date;

  const concatPath = (path, property) =&gt; {
    let ret = path;
    if (property &amp;&amp; property.toString) {
      if (path) {
        ret += PATH_SEPARATOR;
      }

      ret += property.toString();
    }

    return ret;
  };

  const walkPath = (path, callback) =&gt; {
    let index;
    let remainingPath = path;
    while (remainingPath) {
      index = remainingPath.indexOf(PATH_SEPARATOR);

      if (index === -1) {
        index = remainingPath.length;
      }

      callback(remainingPath.slice(0, index));

      remainingPath = remainingPath.slice(index + 1);
    }
  };

  const shallowClone = value =&gt; {
    if (Array.isArray(value)) {
      return value.slice();
    }

    return { ...value };
  };

  const onChange = (object, updateDataLayer, options = {}) =&gt; {
    const proxyTarget = Symbol("ProxyTarget");
    let inApply = false;
    let changed = false;
    let applyPath;
    let applyPrevious;
    let isUnsubscribed = false;
    const equals = options.equals || Object.is;
    let propCache = new WeakMap();
    let pathCache = new WeakMap();
    let proxyCache = new WeakMap();
    let boundUpdateDataLayer;

    const handleChange = (path, property, previous, value) =&gt; {
      if (isUnsubscribed) {
        return;
      }

      if (!inApply) {
        boundUpdateDataLayer(concatPath(path, property), value, previous);
        return;
      }

      if (
        inApply &amp;&amp;
        applyPrevious &amp;&amp;
        previous !== undefined &amp;&amp;
        value !== undefined &amp;&amp;
        property !== "length"
      ) {
        let item = applyPrevious;

        if (path !== applyPath) {
          const appliedPath = path.replace(applyPath, "").slice(1);

          walkPath(appliedPath, key =&gt; {
            item[key] = shallowClone(item[key]);
            item = item[key];
          });
        }

        item[property] = previous;
      }

      changed = true;
    };

    const getOwnPropertyDescriptor = (target, property) =&gt; {
      let props = propCache ? propCache.get(target) : undefined;

      if (props) {
        return props;
      }

      props = new Map();
      propCache.set(target, props);

      let prop = props.get(property);
      if (!prop) {
        prop = Reflect.getOwnPropertyDescriptor(target, property);
        props.set(property, prop);
      }

      return prop;
    };

    const invalidateCachedDescriptor = (target, property) =&gt; {
      const props = propCache ? propCache.get(target) : undefined;

      if (props) {
        props.delete(property);
      }
    };

    const buildProxy = (value, path) =&gt; {
      if (isUnsubscribed) {
        return value;
      }

      pathCache.set(value, path);

      let proxy = proxyCache.get(value);

      if (proxy === undefined) {
        proxy = new Proxy(value, handler);
        proxyCache.set(value, proxy);
      }

      return proxy;
    };

    const unsubscribe = target =&gt; {
      isUnsubscribed = true;
      propCache = null;
      pathCache = null;
      proxyCache = null;

      return target;
    };

    const ignoreChange = property =&gt;
      isUnsubscribed ||
      (options.ignoreSymbols === true &amp;&amp; typeof property === "symbol");

    const handler = {
      get(target, property, receiver) {
        if (property === proxyTarget || property === TARGET) {
          return target;
        }

        if (property === UNSUBSCRIBE &amp;&amp; pathCache.get(target) === "") {
          return unsubscribe(target);
        }

        const value = Reflect.get(target, property, receiver);
        if (
          isPrimitive(value) ||
          isBuiltinWithoutMutableMethods(value) ||
          property === "constructor" ||
          options.isShallow === true
        ) {
          return value;
        }

        // Preserve invariants
        const descriptor = getOwnPropertyDescriptor(target, property);
        if (descriptor &amp;&amp; !descriptor.configurable) {
          if (descriptor.set &amp;&amp; !descriptor.get) {
            return undefined;
          }

          if (descriptor.writable === false) {
            return value;
          }
        }

        return buildProxy(value, concatPath(pathCache.get(target), property));
      },

      set(target, property, value, receiver) {
        const proxyTargetValue =
          value &amp;&amp; value[proxyTarget] !== undefined
            ? value[proxyTarget]
            : value;

        const ignore = ignoreChange(property);
        const previous = ignore
          ? null
          : Reflect.get(target, property, receiver);
        const result = Reflect.set(
          target[proxyTarget] || target,
          property,
          proxyTargetValue
        );

        if (!ignore &amp;&amp; !equals(previous, proxyTargetValue)) {
          handleChange(
            pathCache.get(target),
            property,
            previous,
            proxyTargetValue
          );
        }

        return result;
      },

      defineProperty(target, property, descriptor) {
        const result = Reflect.defineProperty(target, property, descriptor);

        if (!ignoreChange(property)) {
          invalidateCachedDescriptor(target, property);

          handleChange(
            pathCache.get(target),
            property,
            undefined,
            descriptor.value
          );
        }

        return result;
      },

      deleteProperty(target, property) {
        if (!Reflect.has(target, property)) {
          return true;
        }

        const ignore = ignoreChange(property);
        const previous = ignore ? null : Reflect.get(target, property);
        const result = Reflect.deleteProperty(target, property);

        if (!ignore) {
          invalidateCachedDescriptor(target, property);

          handleChange(pathCache.get(target), property, previous);
        }

        return result;
      },

      apply(target, thisArg, argumentsList) {
        const compare = isBuiltinWithMutableMethods(proxyTargetThisArg);

        const proxyTargetThisArg = compare ? thisArg[proxyTarget] : thisArg;

        if (!inApply) {
          inApply = true;

          if (compare) {
            applyPrevious = proxyTargetThisArg.valueOf();
          }

          if (
            Array.isArray(proxyTargetThisArg) ||
            toString.call(proxyTargetThisArg) === "[object Object]"
          ) {
            applyPrevious = shallowClone(proxyTargetThisArg[proxyTarget]);
          }

          applyPath = pathCache.get(target);
          applyPath = applyPath.slice(
            0,
            Math.max(applyPath.lastIndexOf(PATH_SEPARATOR), 0)
          );

          const result = Reflect.apply(
            target,
            proxyTargetThisArg,
            argumentsList
          );

          inApply = false;

          if (
            changed ||
            (compare &amp;&amp; !equals(applyPrevious, proxyTargetThisArg.valueOf()))
          ) {
            handleChange(
              applyPath,
              "",
              applyPrevious,
              proxyTargetThisArg[proxyTarget] || proxyTargetThisArg
            );
            applyPrevious = null;
            changed = false;
          }

          return result;
        }

        return Reflect.apply(target, proxyTargetThisArg, argumentsList);
      }
    };

    const proxy = buildProxy(object, "");
    boundUpdateDataLayer = updateDataLayer.bind(proxy);

    return proxy;
  };

  onChange.target = proxy =&gt; proxy[TARGET] || proxy;
  onChange.unsubscribe = proxy =&gt; proxy[UNSUBSCRIBE] || proxy;

  let proxy;
  let previousDataLayer;

  function _serialize(dataLayer) {
    try {
      return JSON.stringify({ ...dataLayer }, null, 2);
    } catch (e) {
      return JSON.stringify(dataLayer, null, 2);
    }
  }

  function _notify(dataLayer) {
    contentScriptEventTrigger({
      data: {
        dataLayer
      },
      timestamp: Date.now(),
      timeSincePageLoad: window.performance.now()
    });
  }

  function onDataLayerUpdate() {
    const dataLayer = _serialize(this);

    if (previousDataLayer !== dataLayer) {
      previousDataLayer = dataLayer;
      _notify(dataLayer);
    }
  }

  function onDataLayerSet(newDataLayer) {
    const dataLayer = _serialize(newDataLayer);
    if (!previousDataLayer || previousDataLayer !== dataLayer) {
      previousDataLayer = dataLayer;
      _notify(dataLayer);
    }
  }

  Object.defineProperty(window, dataLayerKey, {
    get() {
      return proxy;
    },
    set(newDataLayer) {
      onDataLayerSet(newDataLayer);
      proxy = onChange(newDataLayer, onDataLayerUpdate);
    },
    enumerable: true,
    configurable: true
  });

  const oldObjectDefine = Object.defineProperty.bind(Object);
  Object.defineProperty = (obj, prop, descriptor) =&gt; {
    if (prop === dataLayerKey) {
      console.debug(
        "Data layer being overwritten by Object.defineProperty(). Falling back to polling..."
      );

      function pollForChanges() {
        const dataLayer = _serialize(window[dataLayerKey]);
        if (previousDataLayer !== dataLayer) {
          previousDataLayer = dataLayer;
          _notify(dataLayer);
        }
        window.requestAnimationFrame(pollForChanges);
      }

      window.requestAnimationFrame(pollForChanges);
    }
    return oldObjectDefine(obj, prop, descriptor);
  };
}

		})();
	</script><script xmlns="">
		(function() {
			const contentScriptEventTrigger = function(data) {
				window.postMessage({ id:'adobeExperienceCloudDebuggerContentMessagingIdentifier-2', data: data });
			}
			// https://github.com/adobe/alloy/wiki/Monitoring-Hooks

// This script is run within an immediately executed function, so variables declared here
// are local to this script only.
const orgIdsByInstanceName = {};

window.__alloyMonitors = window.__alloyMonitors || [];
window.__alloyMonitors.push({
  onBeforeNetworkRequest(data) {
    setTimeout(() =&gt; {
      contentScriptEventTrigger({
        name: "onAlloyNetworkRequest",
        data: {
          ...data,
          orgId: orgIdsByInstanceName[data.instanceName]
        }
      });
    });
  },
  onNetworkResponse(data) {
    // There are fields in data that don't serialize well, so we only include parsedBody
    setTimeout(() =&gt; {
      contentScriptEventTrigger({
        name: "onAlloyNetworkResponse",
        data: {
          parsedBody: data.parsedBody,
          orgId: orgIdsByInstanceName[data.instanceName]
        }
      });
    });
  },
  onNetworkError(data) {
    setTimeout(() =&gt; {
      contentScriptEventTrigger({ name: "onAlloyNetworkError", data });
    });
  },
  onInstanceConfigured(data) {
    // We keep a cache of orgIdsByInstanceNames here because the response to getLibraryInfo
    // may happen after a network request already occurred.
    orgIdsByInstanceName[data.instanceName] = data.config.orgId;
    setTimeout(() =&gt; {
      window[data.instanceName]("getLibraryInfo").then(({ libraryInfo }) =&gt; {
        // The configuration section uses debugEnabled to know the initial state
        const debugEnabledSessionStorage = window.sessionStorage.getItem(
          `com.adobe.alloy.instance.${data.instanceName}.debug`
        );
        const debugEnabled =
          debugEnabledSessionStorage === "true" ||
          (data.config.debugEnabled &amp;&amp; debugEnabledSessionStorage === null);

        contentScriptEventTrigger({
          name: "onInstanceConfigured",
          data: {
            namespace: data.instanceName,
            edgeConfigId: data.config.edgeConfigId,
            edgeDomain: data.config.edgeDomain,
            orgId: data.config.orgId,
            // we only use the version (for now), so we don't need to send anything else.
            libraryInfo: {
              version: libraryInfo.version
            },
            debugEnabled
          }
        });
      });
    });
  }
});

		})();
	</script><script xmlns="">
		(function() {
			const contentScriptEventTrigger = function(data) {
				window.postMessage({ id:'adobeExperienceCloudDebuggerContentMessagingIdentifier-3', data: data });
			}
			/**
 * Hooks into both DTM's and Launch's logging mechanisms in order to capture all log messages and
 * send them to the UI to display to the user
 */
function notifyContentScript(log) {
  contentScriptEventTrigger({
    data: log,
    timestamp: Date.now(),
    timeSincePageLoad: window.performance.now()
  });
}

// Create a stub _satellite with the common methods. Without this, this injected script will
// break pages that have logic on them like "window._satellite &amp;&amp; window._satellite.pageBottom()"
const noop = () =&gt; {};
const satelliteStub = {};
[
  "getVar",
  "getVisitorId",
  "notify",
  "pageBottom",
  "readCookie",
  "setCookie",
  "setDebug",
  "setVar",
  "track"
].forEach(prop =&gt; {
  satelliteStub[prop] = noop;
});

window._satellite = {
  ...satelliteStub,
  ...window._satellite
};
window._satellite.override = window._satellite.override || {};

// Hook into _satellite in order to capture DTM logs
if (window.Object &amp;&amp; window.Object.defineProperty) {
  window.Object.defineProperty(
    window._satellite.override,
    "adobe.aepDebugger.dtmInitHook",
    {
      enumerable: true,
      get() {
        onSatelliteInit();
        return "";
      },
      set() {}
    }
  );
}

function onSatelliteInit() {
  // This function will run when DTM is loaded on the page. We use it to hook into DTM logs
  const _satellite = window._satellite;
  if (_satellite.Logger) {
    _satellite.Logger.keepLimit = 9999;
  }

  // override notify
  // Reason: we want to intercept messages that go through here
  // without worrying about limits or messing anything up internally
  const originalNotify = _satellite.notify;
  _satellite.notify = (message, level) =&gt; {
    const logLevel = ["log", "log", "log", "info", "warn", "error"];

    // call original
    originalNotify(message, level);

    const log = {
      solution: "dtm",
      solutions: ["dtm"],
      level: logLevel[level] || "log",
      message: ""
    };

    // make sure that we have a message
    if (message &amp;&amp; typeof message === "string") {
      // only add it
      log.message = message;

      // check to see what solution it came from
      if (message.indexOf("Adobe Analytics:") !== -1) {
        log.solutions.push("analytics");
      } else if (message.indexOf("Test &amp; Target:") !== -1) {
        log.solutions.push("target");
      } else if (message.indexOf("Visitor ID:") !== -1) {
        log.solutions.push("visitorService");
      } else if (message.indexOf("AdLens:") !== -1) {
        log.solutions.push("mediaOptimizer");
      }
    }
    notifyContentScript(log);
  };
}

function _overrideConsoleLogFunction(prefix, solution, level) {
  const originalFunction = console[level];
  console[level] = (...args) =&gt; {
    const argsAsArray = Array.prototype.slice.call(args);
    originalFunction.apply(console, argsAsArray);
    const mappedArgs = argsAsArray.map(arg =&gt; {
      let result = "";
      if (arg &amp;&amp; typeof arg.toString === "function") {
        result = arg.toString();
      }
      if (!result || result === "[object Object]") {
        try {
          result = JSON.stringify(arg);
        } catch (e) {
          return "";
        }
      }
      return result;
    });

    const message = mappedArgs.join(" ");

    if (typeof message === "string") {
      if (message.indexOf(prefix) === 0) {
        const log = {
          solution,
          solutions: [solution],
          level,
          message,
          searchIndex: message,
          params: mappedArgs
        };

        // check to see what solution it came from
        if (message.indexOf("[Adobe Analytics]") !== -1) {
          log.solutions.push("analytics");
        } else if (message.indexOf("[Adobe Target]") !== -1) {
          log.solutions.push("target");
        } else if (message.indexOf("[Experience Cloud ID Service]") !== -1) {
          log.solutions.push("visitorService");
        } else if (message.indexOf("[Adobe Media Optimizer]") !== -1) {
          log.solutions.push("mediaOptimizer");
        }
        notifyContentScript(log);
      }
    }
  };
}

/**
 * Overrides the various console.* methods in order to intercept messages that
 * are sent to the console by launch. A message was sent be launch if it starts
 * with the rocket emoji 🚀. Note that this is a somewhat brittle solution
 * since if the emoji ever changes this integration will break. However this
 * is the only solution that works for now.
 *
 * Any messages that are not prefixed with the rocket emoji are ignored and passed
 * through to the original console function
 */
function _overrideConsoleForLaunch() {
  const prefix = "\uD83D\uDE80";
  ["error", "info", "log", "warn"].forEach(
    _overrideConsoleLogFunction.bind(null, prefix, "launch")
  );
}

/**
 * Intercepts console messages made by alloy (prefixed with [alloy]) and notifies content script about each one.
 * Note that this is a brittle solution and should not be used long term.
 *
 * Ideally there will be some debugging hooks built into alloy itself that we can connect to
 */
function _overrideConsoleForAlloy() {
  window.__alloyNS = [];
  const originalPush = window.__alloyNS.push;
  window.__alloyNS.push = (namespace, ...rest) =&gt; {
    ["error", "info", "log", "warn"].forEach(
      _overrideConsoleLogFunction.bind(null, `[${namespace}]`, "alloy")
    );

    originalPush.apply(
      window.__alloyNS,
      Array.prototype.slice.call([namespace, ...rest])
    );
  };
}

/**
 * Overrides console.debug and console.warn methods in order to intercept messages that
 * are sent to the console by at.js. A message was sent be at.js if it starts
 * with "AT:".
 *
 * Note that this is a somewhat brittle solution
 * since if the prefix ever changes this integration will break. However this
 * is the only solution that works for now, since at.js does not have any debugging hooks.
 * If this ever breaks, the first place to look is at the logger implementation in at.js
 * to see if they changed the prefix or started using different console functions. Check
 * https://git.corp.adobe.com/TnT/atjs-library-v2/blob/master/src/delivery/monitoring/logger/helper.js
 *
 * Any messages that are not prefixed with "AT:" are ignored and passed
 * through to the original console function
 */
function _overrideConsoleForAtJs() {
  const prefix = "AT:";
  ["debug", "warn"].forEach(
    _overrideConsoleLogFunction.bind(null, prefix, "target")
  );
}

_overrideConsoleForLaunch();
_overrideConsoleForAlloy();
_overrideConsoleForAtJs();

// Once the page has finished loading, remove _satellite if both DTM and Launch were not found
window.addEventListener("load", () =&gt; {
  if (!_hasDtm() &amp;&amp; !_hasLaunch()) {
    delete window._satellite;
  }
});

/**
 * @returns {boolean} whether launch is present on the page
 */
function _hasLaunch() {
  return !!(window._satellite &amp;&amp; window._satellite._container);
}

/**
 * @returns {boolean} whether DTM is present on the page
 */
function _hasDtm() {
  return !!(window._satellite &amp;&amp; window._satellite.configurationSettings);
}

		})();
	</script><script xmlns="">
		(function() {
			const contentScriptEventTrigger = function(data) {
				window.postMessage({ id:'adobeExperienceCloudDebuggerContentMessagingIdentifier-4', data: data });
			}
			window.___target_traces = window.___target_traces || [];
const originalPush = window.___target_traces.push;

window.___target_traces.push = function targetTracePush(trace) {
  contentScriptEventTrigger({ trace });
  originalPush.call(this, trace);
};

		})();
	</script>
    <!-- Generator: Sketch 63.1 (92452) - https://sketch.com -->
    <title>Logo</title>
    <desc>Created with Sketch.</desc>
    <g id="Symbols" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g id="Sticky-Nav" transform="translate(-24.000000, -18.000000)" fill="#FFFFFF">
            <g id="Logo" transform="translate(24.494565, 18.000000)">
                <path d="M117.555596,17.0755199 L112.640988,17.0755199 L112.640988,11.7717599 L116.370825,11.7717599 L116.370825,13.3671999 L117.599916,13.3671999 L117.599916,9.01207995 L116.326944,9.01207995 L116.326944,10.5643999 L112.597107,10.5643999 L112.597107,5.51935997 L117.292314,5.51935997 L117.292314,7.28727996 L118.520966,7.28727996 L118.520966,3.70831998 L117.292314,3.70831998 L117.292314,4.26887998 L108.647868,4.26887998 L108.647868,5.30375997 L110.227564,5.30375997 L110.227564,17.1617599 L108.647868,17.1617599 L108.647868,18.2397599 L118.740368,18.2397599 L118.740368,15.2213599 L117.511716,15.2213599 L117.555596,17.0755199 Z M170.958085,4.35511998 L170.958085,5.38999997 L172.537781,5.38999997 L172.537781,14.2295999 L165.210187,4.39823998 L161.523792,4.39823998 L161.523792,5.43311997 L163.059607,5.43311997 L163.586172,6.16615997 L163.586172,17.2911199 L162.006477,17.2911199 L162.006477,18.3691199 L166.5266,18.3691199 L166.5266,17.2911199 L164.946466,17.2911199 L164.946466,7.93407996 L172.801063,18.5847199 L173.898074,18.5847199 L173.898074,5.47623997 L175.47777,5.47623997 L175.47777,4.44135998 L170.958085,4.35511998 Z M152.659944,4.13951998 C148.755024,4.13951998 145.595194,7.37351996 145.595194,11.3836799 C145.595194,15.3938399 148.755024,18.6278399 152.659944,18.6278399 C156.521422,18.6278399 159.680814,15.3938399 159.680814,11.3836799 C159.680814,7.33039996 156.565303,4.13951998 152.659944,4.13951998 L152.659944,4.13951998 Z M152.659944,17.2048799 C150.027118,17.2048799 148.18414,14.7901599 148.18414,11.2974399 C148.18414,7.84783996 150.027118,5.43311997 152.659944,5.43311997 C155.205009,5.43311997 157.047987,7.84783996 157.047987,11.2974399 C157.092307,14.7901599 155.29277,17.2048799 152.659944,17.2048799 L152.659944,17.2048799 Z M97.2389552,14.4020799 L92.4559878,4.39823998 L88.5067487,4.39823998 L88.5067487,5.43311997 L90.0864444,5.43311997 L90.0864444,17.2911199 L88.5067487,17.2911199 L88.5067487,18.3691199 L93.0268723,18.3691199 L93.0268723,17.2911199 L91.4467378,17.2911199 L91.4467378,7.63223996 L96.71239,18.7571999 L101.75864,7.93407996 L101.75864,17.3342399 L100.178944,17.3342399 L100.178944,18.4122399 L105.707879,18.4122399 L105.707879,17.3342399 L104.128183,17.3342399 L104.128183,5.47623997 L105.707879,5.47623997 L105.707879,4.44135998 L101.978042,4.44135998 L97.2389552,14.4020799 Z M130.851368,17.0755199 L126.200042,17.0755199 L126.200042,5.38999997 L127.779738,5.38999997 L127.779738,4.35511998 L122.250803,4.35511998 L122.250803,5.38999997 L123.830499,5.38999997 L123.830499,17.2479999 L122.250803,17.2479999 L122.250803,18.3259999 L132.080459,18.3259999 L132.080459,15.3075999 L130.851368,15.3075999 L130.851368,17.0755199 Z M142.962368,17.0755199 L138.267161,17.0755199 L138.267161,5.38999997 L139.846857,5.38999997 L139.846857,4.35511998 L134.317922,4.35511998 L134.317922,5.38999997 L135.897618,5.38999997 L135.897618,17.2479999 L134.317922,17.2479999 L134.317922,18.3259999 L144.147579,18.3259999 L144.147579,15.3075999 L142.918488,15.3075999 L142.962368,17.0755199 Z M75.8691836,5.38999997 L77.6682814,5.38999997 L74.596651,10.3487999 L71.3494988,5.38999997 L72.9730749,5.38999997 L72.9730749,4.35511998 L67.2686184,4.35511998 L67.2686184,5.38999997 L68.541151,5.38999997 L72.8414336,11.9011199 L72.8414336,17.2479999 L71.2617379,17.2479999 L71.2617379,18.3259999 L76.7906727,18.3259999 L76.7906727,17.2479999 L75.210977,17.2479999 L75.210977,11.8148799 L79.2040966,5.43311997 L80.3449879,5.43311997 L80.3449879,4.39823998 L75.8691836,4.39823998 L75.8691836,5.38999997 Z M46.8642163,10.9524799 C48.2245098,10.5643999 49.453162,9.57263995 49.453162,7.89095996 C49.453162,5.73495997 47.8295859,4.39823998 45.3284011,4.39823998 L38.7902164,4.39823998 L38.7902164,5.43311997 L40.369912,5.43311997 L40.369912,17.2911199 L38.7902164,17.2911199 L38.7902164,18.3691199 L45.6794446,18.3691199 C48.3561511,18.3691199 50.1113685,16.8599199 50.1113685,14.7039199 C50.1552489,12.4185599 48.5755533,11.2974399 46.8642163,10.9524799 L46.8642163,10.9524799 Z M42.8272164,5.60559997 L44.5824337,5.60559997 C45.5039229,5.60559997 47.0397381,5.90743997 47.0397381,7.97719996 C47.0397381,9.70199995 45.7672055,10.4781599 44.4946729,10.4781599 L42.8710968,10.4781599 L42.8710968,5.60559997 L42.8272164,5.60559997 Z M44.6263142,17.0755199 L42.8272164,17.0755199 L42.8272164,11.6423999 L44.6263142,11.6423999 C46.5131729,11.6423999 47.741825,12.7203999 47.741825,14.4883199 C47.741825,16.3855999 46.0743685,17.0755199 44.6263142,17.0755199 L44.6263142,17.0755199 Z M61.6958032,5.38999997 L63.2754989,5.38999997 L63.2754989,14.2295999 L55.9035858,4.39823998 L52.2615098,4.39823998 L52.2615098,5.43311997 L53.797325,5.43311997 L54.2800098,6.16615997 L54.2800098,17.2911199 L52.7003141,17.2911199 L52.7003141,18.3259999 L57.2638793,18.3259999 L57.2638793,17.2911199 L55.6841837,17.2911199 L55.6841837,7.93407996 L63.5387815,18.5847199 L64.6357923,18.5847199 L64.6357923,5.47623997 L66.215488,5.47623997 L66.215488,4.44135998 L61.6958032,4.44135998 L61.6958032,5.38999997 Z" id="Fill-1"/>
                <path d="M28.1273585,11.2111568 L14.6121847,6.03675685 C11.716076,7.58907684 9.34653256,9.40011683 7.41579344,11.2111568 C9.34653256,13.0221968 11.716076,14.8332368 14.6121847,16.3855568 L28.1273585,11.2111568 Z" id="Fill-3"/>
                <path d="M-4.38804345e-05,0.431156878 C-4.38804345e-05,0.431156878 1.40413003,5.00187685 6.14321696,9.96067683 C8.20559738,8.40835683 10.7067821,6.94227684 13.6906517,5.73491685 L-4.38804345e-05,0.431156878 Z" id="Fill-5"/>
                <path d="M-4.38804345e-05,22.0343199 C-4.38804345e-05,22.0343199 1.40413003,17.4635999 6.14321696,12.5047999 C8.20559738,14.0571199 10.7067821,15.5231999 13.6906517,16.7305599 L-4.38804345e-05,22.0343199 Z" id="Fill-8"/>
            </g>
        </g>
    </g>
</svg>